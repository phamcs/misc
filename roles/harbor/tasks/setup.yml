---
- name: Populate service facts
  ansible.builtin.service_facts: {}

- name: Gather the package facts
  ansible.builtin.package_facts:
    manager: auto

# Create harbor domain
- name: Create harbor domain
  ansible.builtin.file:
    path: "/etc/docker/certs.d/{{ domain }}"
    state: directory
    mode: '0755'
    owner: root

# Copy certs to harbor domain
- name: Copy certs
  ansible.builtin.copy:
    src: "{{ item.src }}"
    dest: "{{ item.dest }}"
    mode: 0644
    owner: root
  loop:
    - { src: 'files/superasian.net.cert', dest: '/etc/docker/certs.d/{{ domain }}/superasian.net.cert' }
    - { src: 'files/superasian.net.key', dest: '/etc/docker/certs.d/{{ domain }}/superasian.net.key' }

# Add daemon config
- name: Copy daemon.json
  ansible.builtin.template:
    src: "daemon.json.j2"
    dest: "/etc/docker/daemon.json"
  notify: Restart docker

# Create Harbor Directories
- name: Create Harbor data directory
  ansible.builtin.file:
    path: "{{ harbor_dir }}/{{ item }}"
    state: directory
    mode: 0755
    owner: root
  loop:
    - data
    - cert

# Copy certs
- name: Copy certs
  ansible.builtin.copy:
    src: "{{ item.src }}"
    dest: "{{ item.dest }}"
    mode: 0644
    owner: "{{ app_user }}"
  loop:
    - { src: 'files/superasian.net.cert', dest: '{{ harbor_dir }}/cert/superasian.net.cert' }
    - { src: 'files/superasian.net.key', dest: '{{ harbor_dir }}/cert/superasian.net.key' }

- name: Extract the tar.gz archive
  ansible.builtin.unarchive:
    src: "{{ github_url }}/{{ harbor_version }}/harbor-offline-installer-{{ harbor_version }}.tgz"
    dest: "{{ harbor_dir }}"
    remote_src: yes
    owner: "{{ app_user }}"
    #mode: "0755"
    extra_opts: ['--strip-components=1'] # Optional: To remove the top-level directory during extraction

# Copy Harbor config
- name: Copy harbor config & portainer
  ansible.builtin.copy:
    src: "{{ item.src }}"
    dest: "{{ item.dest }}"
    mode: 0644
    owner: "{{ app_user }}"
  loop:
    - { src: 'files/harbor.yml', dest: '{{ harbor_dir }}/harbor.yml' }
    - { src: 'files/portainer.yml', dest: '{{ harbor_dir }}/portainer.yml' }

# Check the system for error
- name: Check system for error
  ansible.builtin.shell:
    chdir: "{{ harbor_dir }}"
    cmd: |
      ./prepare
  register: command_output

# Display prepare output
- name: Display prepare command's standard output lines
  ansible.builtin.debug:
    msg: "{{ item }}"
  loop: "{{ command_output.stdout_lines }}"

# Install Harbor
- name: Install Harbor
  ansible.builtin.shell:
    chdir: "{{ harbor_dir }}"
    cmd: |
      ./install.sh
  register: install_output
  when: command_output is succeeded

# Display install output
- name: Display install command's standard output lines
  ansible.builtin.debug:
    msg: "{{ item }}"
  loop: "{{ install_output.stdout_lines }}"